#! perl

#:META:RESOURCE:%.target_instances:string:X windows instance type of target windows


use Data::Dumper;

use X11::Protocol 0.56;
use X11::Protocol::Constants qw/ Shift Mod5 ShiftMask /;
use X11::Protocol::WM 29;
use X11::Keysyms '%keysymtocode', 'MISCELLANY', 'XKB_KEYS', '3270', 'LATIN1',
    'LATIN2', 'LATIN3', 'LATIN4', 'KATAKANA', 'ARABIC', 'CYRILLIC', 'GREEK',
    'TECHNICAL', 'SPECIAL', 'PUBLISHING', 'APL', 'HEBREW', 'THAI', 'KOREAN';
use vars qw/ %keysymtocode %keycodetosym /;
$keysymtocode{unknown_sym} = 0xFFFFFF;    # put in a default "unknown" entry
$keysymtocode{EuroSign}
    = 0x20AC;    # Euro sign - missing from X11::Protocol::Keysyms

# and also map it the other way
%keycodetosym = reverse %keysymtocode;


my ($self, @target_instances);

use Symbol qw/ gensym /;

my %windows;    # hash for all window definitions
my %menus;      # hash for all menu definitions

#my $self->{'X11'};
my %keyboardmap;
use AnyEvent::I3 qw(:all);
 
my $s=0;
use List::Util qw(first);


my $em;
my @targets;

$|=1;

sub is_us($) {
	my %node = %{$_[0]};
	my $rv = ($node{'window'} eq $self->parent);
	return ($node{'window'} eq $self->parent);
}

sub is_candidate($) {
	my %node = %{$_[0]};
	return 0 if is_us(\%node);  # avoid loopback
	return 1 if (first {$_ eq $node{'window_properties'}{'instance'}} @target_instances);
}

my $cw;

sub parse_node {
	my %node = %{$_[0]};
	my $receivers = $_[1]; shift; shift;
	my @parent = @_;
	if (scalar @{$node{'nodes'}}>0) {
		foreach my $child (@{$node{'nodes'}}) {
			parse_node($child, \$receivers, @parent, \%node);
		};
	} else {
		if (${$parent[3]}{'name'} eq $cw and is_candidate(\%node)) {
			push(@targets, $node{'window'});
		}
	}
}

sub find_us {
	my %node = %{$_[0]};
	my $receivers = $_[1]; shift; shift;
	my @parent = @_;
	if (scalar @{$node{'nodes'}}>0) {
		foreach my $child (@{$node{'nodes'}}) {
			find_us($child, \$receivers, @parent, \%node);
		};
	} else {
		if (is_us(\%node)) {
			$cw=${$parent[3]}{'name'};
			return $cw;
		}
	}
}

sub i3_recv_tree {
	#	print ("I3 recv tree paramcs: ", Dumper(\@_));
	my %tree = %{$_[0]->recv};
	my $newd_receivers=[];
	my $new_receivers=[];
	@targets=();
	find_us(\%tree, \$newd_receivers);
	parse_node(\%tree, \$new_receivers);
	print ("Targets: ", Dumper \@targets);
}

sub i3_recv_workspaces {
	$self->{'i3'}->get_tree->cb(\&i3_recv_tree, $self);
}

sub cb_enabled {
	#initialize X11lib
	$self->{'X11'} = X11::Protocol->new();

	$em = $self->{'X11'}->pack_event_mask('KeyPress');  # handling and broadcasting KeyRelease event results in double keypresses, somewhy

	load_keyboard_map();

	#initialize i3 socket
	$self->{'i3'} = i3();
	$self->{'i3sock'} = $self->{'i3'}->connect;

	$self->{'i3sock'}->cb (sub {
		$self->{'i3'}->subscribe({'workspace'=>\&i3_recv_workspaces});
		$self->{'i3'}->subscribe({'window'=>\&i3_recv_workspaces});

		});
	$self->{'cb_ref'} = $self->enable(
		key_press => \&cb_key_press,
		tt_paste => \&cb_tt_paste
	);

    if ( !$self->{'X11'} ) {
        die("Failed to get X connection\n");
    }
}

sub cb_disabled {
	undef $self->{'X11'};
	undef $self->{'i3'};
	undef $self->{'cb_ref'};  # disable URxvt callbacks
}

sub overlay_message($$) {
	my ($msg, $timeout) = @_;
	#FIXME
}


sub send_event {
	my %tgtevt = %{$_[0]}; shift;
	my $twid = shift;
	foreach my $target (@targets) {
		$tgtevt{'event'}=$target;
		my $event_string = $self->{'X11'}->pack_event(%tgtevt);
		print $self->{'X11'}->SendEvent( $target, 0, $em, $event_string);
	}
	$self->{'X11'}->flush();
	return 1;
}

sub debug {
	return ();
}

sub load_keyboard_map() {
    my $min      = $self->{'X11'}->{min_keycode};
    my $count    = $self->{'X11'}->{max_keycode} - $min;
    my @keyboard = $self->{'X11'}->GetKeyboardMapping( $min, $count );

    # @keyboard arry
    #  0 = plain key
    #  1 = with shift
    #  2 = with Alt-GR
    #  3 = with shift + AltGr
    #  4 = same as 2 - control/alt?
    #  5 = same as 3 - shift-control-alt?

    debug( 1, "Loading keymaps and keycodes" );

    my %keyboard_modifier_priority = (
        'sa' => 3,    # lowest
        'a'  => 2,
        's'  => 1,
        'n'  => 0,    # highest
    );

    my %keyboard_stringlike_modifiers = reverse %keyboard_modifier_priority;

  # try to associate $keyboard=X11->GetKeyboardMapping table with X11::Keysyms
    foreach my $i ( 0 .. $#keyboard ) {
        for my $modifier ( 0 .. 3 ) {
            if (   defined( $keyboard[$i][$modifier] )
                && defined( $keycodetosym{ $keyboard[$i][$modifier] } ) )
            {

                # keyboard layout contains the keycode at $modifier level
                if (defined(
                        $keyboardmap{ $keycodetosym{ $keyboard[$i][$modifier]
                        } }
                    )
                    )
                {

# we already have a mapping, let's see whether current one is better (lower shift state)
                    my ( $mod_code, $key_code )
                        = $keyboardmap{ $keycodetosym{ $keyboard[$i]
                                [$modifier] } } =~ /^(\D+)(\d+)$/;

      # it is not easy to get around our own alien logic storing modifiers ;-)
                    if ( $modifier < $keyboard_modifier_priority{$mod_code} )
                    {

                     # YES! current keycode have priority over old one (phew!)
                        $keyboardmap{ $keycodetosym{ $keyboard[$i][$modifier]
                        } }
                            = $keyboard_stringlike_modifiers{$modifier}
                            . ( $i + $min );
                    }
                }
                else {

                    # we don't yet have a mapping... piece of cake!
                    $keyboardmap{ $keycodetosym{ $keyboard[$i][$modifier] } }
                        = $keyboard_stringlike_modifiers{$modifier}
                        . ( $i + $min );
                }
            }
            else {

                # we didn't get the code from X11::Keysyms
                if ( defined( $keyboard[$i][$modifier] )
                    && $keyboard[$i][$modifier] != 0 )
                {

                    # ignore code=0
                    debug(
                        2,
                        "Unknown keycode ",
                        $keyboard[$i][$modifier]
                    );
                }
            }
        }
    }

    # don't know these two key combs yet...
    #$keyboardmap{ $keycodetosym { $keyboard[$_][4] } } = $_ + $min;
    #$keyboardmap{ $keycodetosym { $keyboard[$_][5] } } = $_ + $min;

    #print "$_ => $keyboardmap{$_}\n" foreach(sort(keys(%keyboardmap)));
    #print "keysymtocode: $keysymtocode{o}\n";
    #die;
}

sub get_keycode_state($) {
    my ( $keysym ) = @_;
    $keyboardmap{$keysym} =~ m/^(\D+)(\d+)$/;
	#print("Map: ", $keyboardmap{$keysym}, $1, $2, "\n");
    my ( $state, $code ) = ( $1, $2 );

    debug( 2, "keyboardmap=:", $keyboardmap{$keysym}, ":" );
    debug( 2, "state=$state, code=$code" );

SWITCH: for ($state) {
        /^n$/ && do {
            $state = 0;
            last SWITCH;
        };
        /^s$/ && do {
            $state = Shift();
            last SWITCH;
        };
        /^a$/ && do {
            $state = Mod5();
            last SWITCH;
        };
        /^sa$/ && do {
            $state = Shift() + Mod5();
            last SWITCH;
        };

        die("Should never reach here");
    }

    debug( 2, "returning state=:$state: code=:$code:" );

    return ( $state, $code );
}

sub cb_tt_paste {
	my ($term, $octets) = @_;
	foreach my $char (split(//, $octets)) {
        next if ( !defined($char) );
        my $ord = ord($char);
        $ord = 65293 if ( $ord == 10 );    # convert 'Return' to sym

        if ( !defined( $keycodetosym{$ord} ) ) {
            warn("Unknown character in xmodmap keytable: $char ($ord)\n");
            next;
        }
        my $keysym  = $keycodetosym{$ord};
        my $keycode = $keysymtocode{$keysym};

		#print("keysym:", Dumper($char, $keysym, $ord, $keycodetosym{$ord}, $keycode));
		#print("\n");
        my ( $state, $code ) = get_keycode_state($keysym);
		$s++;
		my %tgtevt = (
			'name'        => 'KeyPress',
			'detail'      => $code,
			'state'       => $state,
			'same_screen' => 1,
			'root'        => $self->{'X11'}->{'root'},
			'child'       => 'None',
			'time'        => time(),
			'sequence_number' => $s
		);

		send_event(\%tgtevt);
	}

	return 1 if $self->{'block_input'};
	return 0;
}

sub cb_key_press {
	my ($term, $event, $keysym, $octets) = @_;
	$s+=1;
	my %tgtevt = (
		'name'        => 'KeyPress',
		'detail'      => $$event{'keycode'},
		'state'       => $$event{'state'},
		'same_screen' => 1,
		'root'        => $self->{'X11'}->{'root'},
		'child'       => 'None',
		'time'        => time(),
		'sequence_number' => $s
#		'code'        => 2,#%$event{'type'},
#		'event_x'     => %$event{'x'},
#		'event_y'     => %$event{'y'},
#		'root_x'      => %$event{'x_root'},
#		'root_y'      => %$event{'y_root'},
	);

	send_event(\%tgtevt);

	return 1 if $self->{'block_input'};
	return 0;
}

sub cb_toggle_block_input($) {
	$self->{'block_input'} = $_[0];
}

sub on_init {
	my ($self) = @_;
	$self->{block_input}=1;
    $self->{broadcast_enabled}=0;
	@target_instances=split(',',$self->x_resource("%.target_instances" || 'urxvt,wssh'));

	push @{ $self->{term}{option_popup_hook} }, sub {
		(
			"broadcast enabled" => $self->{broadcast_enabled}, sub {
				$self->{broadcast_enabled} = shift;
				if ($self->{broadcast_enabled}) {
					cb_enabled($self);
				} else {
					cb_disabled($self);
				};
			}
		)
	}, sub {
	   (
		   "broadcast disable input" => $self->{block_input}, sub {
				$self->{block_input} = shift;
			}
		)
		#}\&cb_toggle_block_input)
	};

	()
}

sub on_start {
	($self) = @_;

	print("i3b started\n");
	print "self: ", $self, "\n";
	print "term ", $self->{term}, "\n";
	print "parent: ", $self->parent, "\n";
	print "vt: ", $self->vt, "\n";

	()
}

sub on_destroy {
	cb_disabled();
}

